{"version":3,"sources":["components/Input.tsx","components/Card.tsx","components/Messages.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["InputData","props","useState","content","setContent","placeholder","className","value","onChange","event","target","onClick","preventDefault","getXML","Card","children","mock","_attributes","Date","Time","Text","_text","From","User","FriendlyName","Message","check","item","left","badge","Messages","data","key","isLeft","refined","filter","e","get","map","i","arr","prev","App","showInput","toggleInput","Log","setData","useEffect","result","xml2json","compact","spaces","parsed","JSON","parse","xmlString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.907d2293.chunk.js","sourcesContent":["\nimport { SyntheticEvent, useState } from 'react';\n\ninterface Props {\n  getXML: Function\n};\n\nconst InputData = (props: Props): JSX.Element => {\n  const [content, setContent] = useState<string>('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => \n    setContent(event.target.value);\n\n  const handleClick = (event: SyntheticEvent) => {\n    event.preventDefault();\n    props.getXML(content);\n  }\n\n  return (\n    <form>\n      <textarea \n        placeholder=\"Paste XML content here!\"\n        className=\"textarea h-40 w-full textarea-bordered\"\n        value={content}\n        onChange={handleChange}\n      ></textarea>\n      <div className=\"d-grid gap-2\">\n        <button \n          className=\"btn btn-block btn-primary text-white mt-3\"\n          onClick={handleClick}\n        >Convert</button>\n      </div>\n    </form>\n  )\n}\n\nexport {\n  InputData\n}","\ninterface Props {\n  children: React.ReactNode\n}\n\nconst Card = (props: Props): JSX.Element => (\n  <div className=\"card w-1/2 shadow-lg bg-white mx-auto mb-6\">\n    <div className=\"card-body\">\n      {props.children}\n    </div>\n  </div>\n);\n\nexport {\n  Card\n}","import get from 'lodash.get';\nimport { MSNmessage } from '../type';\n\ninterface MsgProps {\n  item: MSNmessage\n};\n\ninterface Props {\n  data: Array<MSNmessage>\n};\n\nconst mock: MSNmessage = {\n  _attributes: { Date: '', Time: '' },\n  Text: { _text: '' },\n  From: { User: { _attributes: { FriendlyName: '' } } }\n};\n\nconst Message = (props: MsgProps): JSX.Element => {\n  const item: MSNmessage = props.item || mock;\n  const badge = (check?: boolean): string => check ? 'badge-primary text-white block' : 'inline-block bg-gray-500 border-gray-500';\n  const align = (check?: boolean): string => check ? 'my-2' : 'text-right my-2';\n\n  return (\n    <li className={align(item.left)}>\n      <span className=\"text-sm font-bold block\">{item.From.User._attributes.FriendlyName}</span>\n      <span className={\"badge my-1 whitespace-normal break-words rounded h-auto \" + badge(item.left)}>{item.Text._text}</span>\n      <span className=\"text-xs italic block\">{item._attributes.Date} {item._attributes.Time}</span>\n    </li>\n  );\n}\n\nconst Messages = (props: Props): JSX.Element => {\n  const data: Array<MSNmessage> = props.data || [mock,mock];\n  const key: string = 'From.User._attributes.FriendlyName';\n  let isLeft: boolean = true;\n\n  const refined: Array<MSNmessage> = data\n    .filter((e: MSNmessage): MSNmessage => get(e, key))\n    .map((\n      e: MSNmessage, \n      i: number, \n      arr: Array<MSNmessage>\n    ) => {\n      const prev: number = i !== 0 ? i-1 : 0;\n      const condition: boolean = get(e, key) !== get(arr[prev], key); \n      if (condition) { isLeft = !isLeft };\n      return {...e, left: isLeft};\n    });\n\n  return (\n    <ul className=\"list-unstyled\">\n      {refined.map((e,i) => <Message key={i} item={e} />)}\n    </ul>\n  )\n}\n\nexport {\n  Messages\n}","\nimport { useState, useEffect } from 'react';\nimport { xml2json } from 'xml-js'; \n\nimport { InputData } from './components/Input';\nimport { Card } from './components/Card';\nimport { Messages } from './components/Messages';\nimport { MSNobject } from './type';\n\n// const Empty = (): JSX.Element => <div></div>;\n\nconst App = (): JSX.Element => {\n  const [content, setContent] = useState<string>('');\n  const [showInput, toggleInput] = useState<boolean>(true);\n  const [data, setData] = useState<MSNobject>({ Log: { Message: [] }});\n\n  const inputHandler = (xmlString: string) => setContent(xmlString);\n\n  useEffect(() => {\n    const result: string = xml2json(content, { compact: true, spaces: 4 });\n    const parsed: any = JSON.parse(result);\n\n    if (parsed.Log) {\n      setData(parsed);\n      toggleInput(false);\n    }\n  }, [content]);\n\n  return (\n    <main className=\"container py-12\">\n      <Card>\n        <h2 className=\"card-title text-3xl\">MSN Messenger viewer</h2>\n        {showInput ? <InputData getXML={inputHandler} /> : <Messages data={data.Log.Message} />}\n      </Card>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}